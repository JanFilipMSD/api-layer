buildscript {
    repositories mavenRepositories
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitPropertiesVersion}")
        classpath "com.github.node-gradle:gradle-node-plugin:3.1.1"
        classpath("org.eclipse.jgit:org.eclipse.jgit") {
            version {
                strictly '5.13.0.202109080827-r'
            }
        }
    }
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'com.google.cloud.tools.jib'
apply plugin: "com.github.node-gradle.node"
apply from: "../gradle/jib.gradle"

def debugPort = 5128
def javaAgentPort = 6311
def componentName = "certificate-service"

setJib(componentName, javaAgentPort, debugPort)

node {
    download = true
    version = rootProject.nodejsVersion
    distBaseUrl = "https://nodejs.org/dist"
    npmInstallCommand = "ci"
    workDir = file("${project.projectDir}/tools/nodejs")
    npmWorkDir = file("${project.projectDir}/tools/npm")
    yarnWorkDir = file("${project.projectDir}/tools/yarn")
    nodeProjectDir = file("${project.projectDir}/frontend")
}

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additionalProperties = [
                by: System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number: System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine: InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    implementation project(':onboarding-enabler-spring')
    implementation project(':certificate-analyser')
    implementation(libraries.spring_boot_starter_web) {
        exclude group: "org.yaml", module: "snakeyaml"
    }
    implementation libraries.snakeyaml
    implementation libraries.spring_cloud_commons
    implementation libraries.spring_boot_starter
    implementation libraries.spring_security_web
    implementation libraries.spring_security_config
    implementation libraries.spring_boot_starter_actuator
    compileOnly libraries.lombok
    annotationProcessor libraries.lombok

    testCompileOnly libraries.lombok
    testAnnotationProcessor libraries.lombok

    testImplementation libraries.spring_boot_starter_test
    testImplementation libraries.json_smart
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    systemProperties = System.properties
}

bootJar.archiveName = "${bootJar.baseName}.jar"

jar {
    enabled true
}

publishing {
    publications {
        mavenJavaFat(MavenPublication) {
            groupId = 'org.zowe.apiml'
            artifactId = 'certificate-service-fat-jar'
            artifact bootJar
        }
    }
}

task javascriptClean(type: Delete) {
    group = 'npm'
    delete 'bin', 'build', 'frontend/test-results', 'frontend/coverage', 'frontend/build'

    if (rootProject.cleanNodeModules == 'true') {
        delete 'frontend/node_modules'
    }
}
clean.dependsOn javascriptClean

task npmBuild(type: NpmTask) {
    group = 'npm'
    description = "Executes npm build"
    inputs.dir('frontend/src').withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir('frontend/public').withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file('frontend/package.json').withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.dir('frontend/build')
    outputs.cacheIf { true }

    args = ['run', 'build']

}


task copyUi(type: Copy) {
    from 'frontend/build'
    into 'src/main/resources/static'
}
npmBuild.dependsOn npmInstall
copyUi.dependsOn npmBuild
build.dependsOn copyUi
classes.dependsOn copyUi
